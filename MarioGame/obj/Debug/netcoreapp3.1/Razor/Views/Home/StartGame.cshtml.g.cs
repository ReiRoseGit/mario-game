#pragma checksum "D:\Code\sgu\MarioGame\MarioGame\Views\Home\StartGame.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "90703a0c8b63ff4bc0f5c25a997adb3e4cb6a700"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_StartGame), @"mvc.1.0.view", @"/Views/Home/StartGame.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\Code\sgu\MarioGame\MarioGame\Views\_ViewImports.cshtml"
using MarioGame;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\Code\sgu\MarioGame\MarioGame\Views\_ViewImports.cshtml"
using MarioGame.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"90703a0c8b63ff4bc0f5c25a997adb3e4cb6a700", @"/Views/Home/StartGame.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"9c36a7573e777599d29fdd13f80c60885215b952", @"/Views/_ViewImports.cshtml")]
    #nullable restore
    public class Views_Home_StartGame : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<MarioGame.Models.Game.GameModel>
    #nullable disable
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n<canvas id=\"canvas\"></canvas>\r\n<img src=\"/images/background.jpg\" hidden>\r\n<img src=\"/images/mario.png\" hidden>\r\n<img src=\"/images/enemy.png\" hidden>\r\n<img src=\"/images/platform.png\" hidden>\r\n<img src=\"/images/health.png\" hidden>\r\n\r\n");
            DefineSection("Scripts", async() => {
                WriteLiteral(@"
    <script>
        let maxScore = 0
        const background = new Image()
        background.src = '/images/background.jpg'

        const mario = new Image()
        mario.src = '/images/mario.png'

        const gravity = 1.0

        const canvas = document.getElementById('canvas')
        const c = canvas.getContext('2d')

        function createImage(imageSrc) {
            const image = new Image()
            image.src = imageSrc
            return image
        }

        const enemy = new Image()
        enemy.src = '/images/enemy.png'

        class GenericObject {
            constructor({ x, y, image, c }) {
                this.position = {
                    x: x,
                    y: y,
                }
                this.c = c
                this.image = image
                this.width = image.width
                this.height = image.height
            }

            draw() {
                this.c.drawImage(this.image, this.position.x, this.pos");
                WriteLiteral(@"ition.y)
            }
        }
        class Enemy {
            constructor({ x, y, image, c }) {
                this.startPosition = {
                    x,
                    y,
                }
                this.position = {
                    x,
                    y,
                }
                this.image = image
                this.width = image.width
                this.height = image.height
                this.speed = -2
                this.c = c
                this.maxPosition = image.width + 100
                this.currentStep = 0
                this.currentWay = 1
            }

            draw() {
                this.c.drawImage(this.image, this.position.x, this.position.y)
            }

            update() {
                this.draw()

                this.currentStep += this.currentWay
                this.position.x -= this.speed * this.currentWay
                if (this.currentStep == this.maxPosition) {
                    this.cu");
                WriteLiteral(@"rrentWay = -1
                }
                if (this.currentStep == 0) {
                    this.currentWay = 1
                }
            }
        }

        class Health {
    constructor({ x, y, image, c }) {
        this.position = {
            x,
            y,
        }
        this.image = image
        this.c = c
    }

    draw() {
        this.c.drawImage(this.image, this.position.x, this.position.y)
    }
}

        class Platform {
            constructor({ x, y, image, c }) {
                this.position = {
                    x: x,
                    y: y,
                }
                this.c = c
                this.image = image
                this.width = image.width
                this.height = image.height
            }

            draw() {
                this.c.drawImage(this.image, this.position.x, this.position.y)
            }
        }
        class Player {
            constructor(c) {
                this.position = {
   ");
                WriteLiteral(@"                 x: 100,
                    y: 100,
                }
                this.velocity = {
                    x: 0,
                    y: 0,
                }
                this.width = 60
                this.height = 60
                this.speed = 7
                this.image = mario
                this.c = c
            }

            draw() {
                this.c.drawImage(this.image, this.position.x, this.position.y)
            }

            update() {
                this.draw()
                this.position.x += this.velocity.x
                this.position.y += this.velocity.y

                if (this.position.y + this.height + this.velocity.y <= canvas.height)
                    this.velocity.y += gravity
            }
        }

        const padBetweenPlatforms = 5

        class Game {
            constructor() {
                this.player = new Player(c)
                this.platformImage = createImage('/images/platform.png')
          ");
                WriteLiteral(@"      this.platforms = []
                this.genericObjects = []
                this.enemies = []
                this.isJumped = false
                this.isGameEnded = false
                this.health = 4

                this.keys = {
                    right: {
                        pressed: false,
                    },
                    left: {
                        pressed: false,
                    },
                }

                this.scrollOffset = 0

                this.init = this.init.bind(this)
                this.animate = this.animate.bind(this)

                this.countOfHealth = []
            }

            init() {
                // Количество жизней
                const h = createImage('/images/health.png')
                this.countOfHealth = []
                for (let i = 0; i < this.health; i++) {
                    this.countOfHealth.push(
                        new Health({
                            x: 30 + i * 30,
        ");
                WriteLiteral(@"                    y: 20,
                            image: h,
                            c: c,
                        })
                    )
                }
                this.player = new Player(c)
                this.platformImage = createImage('/images/platform.png')
                this.platforms = [
                    // Добавляем платформы, на которые можно прыгать
                    new Platform({
                        x: this.platformImage.width * 6 - padBetweenPlatforms,
                        y: 350,
                        image: this.platformImage,
                        c: c,
                    }),

                    // Для очень большой ямы
                    new Platform({
                        x: this.platformImage.width * 11 - this.platformImage.width / 2,
                        y: 440,
                        image: this.platformImage,
                        c: c,
                    }),

                    new Platform({
                 ");
                WriteLiteral(@"       x: this.platformImage.width * 12 - padBetweenPlatforms,
                        y: 300,
                        image: this.platformImage,
                        c: c,
                    }),

                    new Platform({
                        x: this.platformImage.width * 19 + this.platformImage.width / 2,
                        y: 440,
                        image: this.platformImage,
                        c: c,
                    }),

                    new Platform({
                        x: this.platformImage.width * 21 - this.platformImage.width / 2,
                        y: 285,
                        image: this.platformImage,
                        c: c,
                    }),

                    new Platform({
                        x:
                            this.platformImage.width * 22 +
                            this.platformImage.width / 2 -
                            padBetweenPlatforms,
                        y: 285,
           ");
                WriteLiteral(@"             image: this.platformImage,
                        c: c,
                    }),

                    // Платформы, по которым бегаем
                    new Platform({
                        x: -1,
                        y: 540,
                        image: this.platformImage,
                        c: c,
                    }),

                    new Platform({
                        x: this.platformImage.width - padBetweenPlatforms,
                        y: 540,
                        image: this.platformImage,
                        c: c,
                    }),

                    // Маленькая яма с двух сторон
                    new Platform({
                        x:
                            this.platformImage.width * 3 -
                            padBetweenPlatforms -
                            this.platformImage.width / 2,
                        y: 540,
                        image: this.platformImage,
                        c: c,
    ");
                WriteLiteral(@"                }),
                    new Platform({
                        x:
                            this.platformImage.width * 4 -
                            padBetweenPlatforms -
                            this.platformImage.width / 2,
                        y: 540,
                        image: this.platformImage,
                        c: c,
                    }),

                    // Обычный пол без ям
                    new Platform({
                        x: this.platformImage.width * 5,
                        y: 540,
                        image: this.platformImage,
                        c: c,
                    }),

                    new Platform({
                        x: this.platformImage.width * 6 - padBetweenPlatforms,
                        y: 540,
                        image: this.platformImage,
                        c: c,
                    }),

                    // Большая яма
                    new Platform({
               ");
                WriteLiteral(@"         x: this.platformImage.width * 8,
                        y: 540,
                        image: this.platformImage,
                        c: c,
                    }),

                    new Platform({
                        x: this.platformImage.width * 9 - padBetweenPlatforms,
                        y: 540,
                        image: this.platformImage,
                        c: c,
                    }),

                    // Очень большая яма
                    new Platform({
                        x: this.platformImage.width * 14,
                        y: 540,
                        image: this.platformImage,
                        c: c,
                    }),

                    new Platform({
                        x: this.platformImage.width * 15 - padBetweenPlatforms,
                        y: 540,
                        image: this.platformImage,
                        c: c,
                    }),
                    new Platform({
     ");
                WriteLiteral(@"                   x: this.platformImage.width * 17,
                        y: 540,
                        image: this.platformImage,
                        c: c,
                    }),
                    new Platform({
                        x: this.platformImage.width * 18,
                        y: 540,
                        image: this.platformImage,
                        c: c,
                    }),
                    new Platform({
                        x: this.platformImage.width * 25 - this.platformImage.width / 2,
                        y: 540,
                        image: this.platformImage,
                        c: c,
                    }),
                    new Platform({
                        x:
                            this.platformImage.width * 26 -
                            padBetweenPlatforms -
                            this.platformImage.width / 2,
                        y: 540,
                        image: this.platformImage,
      ");
                WriteLiteral(@"                  c: c,
                    }),
                    new Platform({
                        x: this.platformImage.width * 27 - padBetweenPlatforms,
                        y: 540,
                        image: this.platformImage,
                        c: c,
                    }),
                    new Platform({
                        x: this.platformImage.width * 28 - padBetweenPlatforms,
                        y: 540,
                        image: this.platformImage,
                        c: c,
                    }),
                    new Platform({
                        x: this.platformImage.width * 29 - padBetweenPlatforms,
                        y: 540,
                        image: this.platformImage,
                        c: c,
                    }),
                    new Platform({
                        x: this.platformImage.width * 30 - padBetweenPlatforms,
                        y: 540,
                        image: this.platformImage,");
                WriteLiteral(@"
                        c: c,
                    }),
                ]
                this.genericObjects = [
                    new GenericObject({
                        x: 0,
                        y: -665,
                        image: createImage('/images/background.jpg'),
                        c: c,
                    }),
                ]

                // Враг
                const e = createImage('/images/enemy.png')

                // Добавляем движущихся врагов
                this.enemies = [
                    new Enemy({
                        x: 750,
                        y: 480,
                        image: e,
                        c: c,
                    }),
                    new Enemy({
                        x: 1500,
                        y: 480,
                        image: e,
                        c: c,
                    }),
                    new Enemy({
                        x: 1710,
                        y: 290,
  ");
                WriteLiteral(@"                      image: e,
                        c: c,
                    }),
                    new Enemy({
                        x: 3040,
                        y: 380,
                        image: e,
                        c: c,
                    }),
                    new Enemy({
                        x: 4080,
                        y: 480,
                        image: e,
                        c: c,
                    }),
                    new Enemy({
                        x: 4250,
                        y: 480,
                        image: e,
                        c: c,
                    }),
                    new Enemy({
                        x: 5690,
                        y: 380,
                        image: e,
                        c: c,
                    }),
                    new Enemy({
                        x: 5980,
                        y: 225,
                        image: e,
                        c: c,
     ");
                WriteLiteral(@"               }),
                    new Enemy({
                        x: 6575,
                        y: 225,
                        image: e,
                        c: c,
                    }),
                    new Enemy({
                        x: 7200,
                        y: 480,
                        image: e,
                        c: c,
                    }),
                    new Enemy({
                        x: 7950,
                        y: 480,
                        image: e,
                        c: c,
                    }),
                ]
                this.scrollOffset = 0
            }

            // Главная функция анимации
            animate() {
                if (maxScore < this.scrollOffset) {
                    console.log(maxScore, this.scrollOffset)
                    maxScore = this.scrollOffset
                }
                // Условие победы
                if (this.isGameEnded && this.player.position.y >= 475) ");
                WriteLiteral(@"{
                    maxScore = 7900
                    winGameHandler()
                    return
                    //const canvas = document.getElementById('canvas')
                    //canvas.style.display = 'none'

                    //const victoryModal = document.getElementById('victory__modal')
                    //victoryModal.style.display = 'flex'
                    //return
                }
                window.requestAnimationFrame(this.animate)
                c.fillStyle = 'white'
                c.fillRect(0, 0, canvas.width, canvas.height)

                // Рисуем остальные объекты: фон
                this.genericObjects.forEach((object) => {
                    object.draw()
                })

                // Рисуем платформы
                this.platforms.forEach((platform) => {
                    platform.draw()
                })

                // Рисуем движущихся врагов
                this.enemies.forEach((enemy) => {
                   ");
                WriteLiteral(@" enemy.update()
                })

                // Рисуем анимированного игрока
                this.player.update()

                // Рисуем жизни
                this.countOfHealth.forEach((health) => {
                    health.draw()
                })

                // Игрок движется
                if (this.keys.right.pressed && this.player.position.x < 400) {
                    this.player.velocity.x = this.player.speed
                } else if (
                    (this.keys.left.pressed && this.player.position.x > 100) ||
                    (this.keys.left.pressed &&
                        this.scrollOffset === 0 &&
                        this.player.position.x > 0)
                ) {
                    this.player.velocity.x = -this.player.speed
                } else {
                    this.player.velocity.x = 0
                    if (this.keys.right.pressed) {
                        this.scrollOffset += this.player.speed

                        this");
                WriteLiteral(@".platforms.forEach((platform) => {
                            platform.position.x -= this.player.speed
                        })

                        this.enemies.forEach((enemy) => {
                            enemy.position.x -= this.player.speed
                            // enemy.maxPosition += this.player.speed
                        })
                    } else if (this.keys.left.pressed && this.scrollOffset > 0) {
                        this.scrollOffset -= this.player.speed

                        this.platforms.forEach((platform) => {
                            platform.position.x += this.player.speed
                        })

                        this.enemies.forEach((enemy) => {
                            enemy.position.x += this.player.speed
                            // enemy.maxPosition -= this.player.speed
                        })
                    }
                }

                // Возможность запрыгивания на платформы
                this.pl");
                WriteLiteral(@"atforms.forEach((platform) => {
                    if (
                        this.player.position.y + this.player.height <=
                        platform.position.y &&
                        this.player.position.y +
                        this.player.height +
                        this.player.velocity.y >=
                        platform.position.y &&
                        this.player.position.x + this.player.width >=
                        platform.position.x &&
                        this.player.position.x <= platform.position.x + platform.width
                    ) {
                        this.player.velocity.y = 0
                        this.isJumped = false
                    }
                })

                // Обрабатываем удар о противника
                this.enemies.forEach((enemy) => {
                    if (
                        Math.abs(this.player.position.x - enemy.position.x) < 30 &&
                        Math.abs(this.player.position.y - ene");
                WriteLiteral(@"my.position.y) < 30
                    ) {
                        this.health -= 1
                        this.loseGame()
                    }
                })

                // Победа:
                if (this.scrollOffset > 7900) {
                    this.isGameEnded = true
                }

                // Поражение:
                if (this.player.position.y > canvas.height) {
                    this.health -= 1
                    this.loseGame()
                }
            }

            // Навешиваем события на кнопку клавиатуры
            atachEvents() {
                window.addEventListener('keydown', ({ keyCode }) => {
                    switch (keyCode) {
                        // Клавиша ""A""
                        case 65:
                            this.keys.left.pressed = true
                            break
                        // Клавиша ""D""
                        case 68:
                            this.keys.right.pressed = true
    ");
                WriteLiteral(@"                        break
                        // Клавиша ""W""
                        case 87:
                            if (!this.isJumped) {
                                this.player.velocity.y -= 20
                                this.isJumped = true
                            }
                            break
                    }
                })

                window.addEventListener('keyup', ({ keyCode }) => {
                    switch (keyCode) {
                        // Клавиша ""A""
                        case 65:
                            this.keys.left.pressed = false
                            break
                        // Клавиша ""D""
                        case 68:
                            this.keys.right.pressed = false
                            break
                    }
                })
            }

            // Обработка смерти игрока
            loseGame() {
                if (this.health > 0) {
                    
     ");
                WriteLiteral(@"               if (maxScore < this.scrollOffset) maxScore = this.scrollOffset
                    this.init()
                } else {

                    // Условие поражения
                    if (this.health == 0) {
                        //const canvas = document.getElementById('canvas')
                        //canvas.style.display = 'none'

                        //const loseModal = document.getElementById('lose__modal')
                        //loseModal.style.display = 'flex'
                        loseGameHandler()
                        console.log(""Поражение"")
                        return
                    }
                }
            }
        }

        function startGame() {
            const game = new Game()
            game.init()
            game.atachEvents()
            game.animate()
        }
        document.addEventListener('DOMContentLoaded', () => {
            const canvas = document.getElementById('canvas')

            canvas.width = 1024");
                WriteLiteral(@"
            canvas.height = 576

            startGame()
        })

        function winGameHandler(){ 
            $.post('WinGame', { score: maxScore }, function() {
                location.href = '/Home/WinGame';
            });
        }

        function loseGameHandler() {
            $.post('LoseGame', { score: maxScore }, function () {
                location.href = '/Home/LoseGame';
            });
        }
    </script>
");
            }
            );
        }
        #pragma warning restore 1998
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<MarioGame.Models.Game.GameModel> Html { get; private set; } = default!;
        #nullable disable
    }
}
#pragma warning restore 1591
